Sourcetree:route

作業ジャンル推定データベースの作成

まず、window_nameと作業ジャンルを保存するための新しいデータベースを作成します。このデータベースはwindow_nameとそれに対応する作業ジャンルを格納することで、以前に推定されたジャンルを再利用できるようにします。
ポモドーロタイマーの更新

ポモドーロタイマーが作業を行うたびに（例えば、1分ごとに）、以下の情報を更新します：
session_id
time
window_name
activity_genre
ここでactivity_genreの更新は、以下の手順を実行します。
activity_genreの更新

window_nameと作業ジャンルを保存するデータベースを確認して、同じwindow_nameが存在するかを確認します。
同じwindow_nameが存在し、それに対応するジャンルが記録されている場合、その記録されているジャンルをactivity_genreの更新に使用します。
同じwindow_nameが存在しない場合、AIにwindow_nameがどのようなジャンルに属するかを推定してもらいます。そして、その結果をwindow_nameと作業ジャンルを保存するデータベースに保存し、activity_genreを更新します。
AIの問い合わせ

AIの問い合わせは時間がかかる可能性があるため、別のスレッドで行います。これにより、作業タイマーなどの他の機能に影響を与えることなく、ジャンル推定を行うことができます。


・セッション間が自動で切り替わるが、これをボタンで次に進むように変更

・終了ボタンを押したときにタイマーが一時的に停止するように変更

・セッションが終わるたびに、テーブル：ActivityGenreに対して、動作をしてほしい
希望する動作は、
１・確認されたウィンドウ名が、ActivityGenreに存在するかを確認し、存在するなら、テーブルから抽出してきて、AIにわたすように動作を変更
２・存在しないなら、ウィンドウ名と、アクティビティジャンルの書き込みを行う
※これはユーザーが適切に変更できるように、動作を考えましょう
※コレを行う理由は、毎回ウィンドウ名からジャンルをAIに考えさせると動作が重たくなりそうだし、お金もかかるので



【やりたいこと増えた分のメモ】
休憩が終わったタイミングで、さっきまでやってたことを簡単にまとめて提示し、続きで何をするべきかをユーザーにお伝え
作業が終わったタイミングで、休憩の間にやっていたことを簡単にまとめて提示し、続きで何をするべきかを提示
事前にジャンルを10～20くらいまとめたtxt？jsonファイルから、ジャンルを選択するようにAIにさせることで、精度を高める


『既知の問題】
・4の倍数のセッションに長い休憩時間が選択されない
・

【怪しそうな内容】
async_swtich_mode（作業状態の切り替えを行う関数）の後に、WindowActivityへの書き込みが発生している？









main.py



utils
  - config.json
  - config.py
  - text_generator.py
  - work_prososer.py

view
  - download_window.py
  - end_question_window.py
  - end_window.py
  img
    download
      - button_1.png
      - button_2.png
      - entry_1.png
      - entry_10.png
      - entry_2.png
      - entry_3.png
      - entry_4.png
      - entry_5.png
      - entry_6.png
      - entry_7.png
      - entry_8.png
      - entry_9.png
    end
      - close.png
      - image_1.png
    end_question
      - button_1.png
      - button_2.png
    main
      - button_1.png
      - button_2.png
      - button_3.png
      - button_4.png
      - button_4_dark.png
      - button_5.png
      - button_6.png
      - rest_button.png
      - work_button.png
    setting
      - button_1.png
      - button_2.png
      - entry_1.png
      - entry_2.png
      - entry_3.png
      - image_1.png
    setting_save
      - image_1.png
  - main_window.py
  - settings_saved_window.py
  - settings_window.py

controller
  - sample_timecount.py
  - timer_controller.py
  - window_controller.py

model
  database
    - mikage_timer.db
  - database.py
  - pomodoro_session.py
  - window_activity.py